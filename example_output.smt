Start Event: "UserArrivalOpenWorkload", End Event: "UserArrivalOpenWorkload", Input: (assert true), Output: (declare-fun interarrivalTime () Real)(declare-fun delay () Real)(assert (= delay interarrivalTime))
Start Event: UserArrivalClosedWorkload, End Event: ProcessUsageScenario, Input: (declare-fun population () Int) (assert (>= population 1)), Output: (declare-fun thinkTime () Real)(declare-fun delay () Real)(assert (= delay thinkTime))
Start Event: UserArrivalOpenWorkload, End Event: ProcessUsageScenario, Input: (assert true), Output: (declare-fun delay () Real) (assert (= delay 0.0))
Start Event: ProcessUsageScenario, End Event: DelayAction, Input: (declare-datatypes ((actions 0)) (((DelayAction) (EntryLevelSystemCall) (END)))) (declare-fun behavior () (Array Int UsageBehavior)) (assert (= (select behavior 0) DelayAction)), Output: (declare-fun delay () Real) (assert (= delay 0.0))
Start Event: DelayAction, End Event: ProcessUsageScenario, Input: (assert true), Output: (declare-fun delaySpecification () Real)(declare-fun delay () Real)(assert (= delay delaySpecification))
Start Event: ProcessUsageScenario, End Event: EntryLevelSystemCall, Input: (declare-datatypes ((actions 0)) (((DelayAction) (EntryLevelSystemCall) (END)))) (declare-fun behavior () (Array Int actions)) (assert (= (select behavior 0) EntryLevelSystemCall)), Output: (declare-fun delay () Real) (assert (= delay 0.0))
Start Event: EntryLevelSystemCall, End Event: ProcessRDSEFF, Input: (assert true), Output: (declare-fun delay () Real) (assert (= delay 0.0))
Start Event: ProcessUsageScenario, End Event: UsageScenarioFinished, Input: (declare-datatypes ((actions 0)) (((DelayAction) (EntryLevelSystemCall) (END)))) (declare-fun behavior () (Array Int actions)) (assert (= (select behavior 0) END)), Output: (declare-fun delay () Real) (assert (= delay 0.0))
Start Event: UsageScenarioFinished, End Event: UserArrivalClosedWorkload, Input: (assert true), Output: (declare-fun delay () Real) (assert (= delay 0.0))
Start Event: ReleaseAction, End Event: ReleasePassiveResource, Input: (assert true), Output: (declare-fun delay () Real) (assert (= delay 0.0))
Start Event: AcquireAction, End Event: BlockPassiveResource, Input: (declare-fun capacity () Int)(declare-fun demand () Int)(assert (<= demand capacity)), Output: (declare-fun delay () Real) (assert (= delay 0.0))
Start Event: ConsumeSimProcessorSharingResource, End Event: ConsumeSimProcessorSharingResource, Input: (assert true), Output: (declare-fun capacity () Real)(declare-fun countOfRunningProcesses () Real)	(declare-fun speed () Real)	(declare-fun delay () Real)	(assert (= speed (ite (<= (/ countOfRunningProcesses capacity) 1.0) 1.0 (/ countOfRunningProcesses capacity)))) (assert (= delay (* speed demand)))
Start Event: ConsumeSimDelayResource, End Event: ProcessRDSEFF, Input: (assert true), Output: (declare-fun demand () Real)(declare-fun delay () Real)(assert (= delay demand))
Start Event: ProcessRDSEFF, End Event: "ReleaseAction", Input: (declare-datatypes ((actions 0)) (((AcquireAction) (ExternalCall) (ReleaseAction) (InternalAction))))	(declare-fun behavior () (Array Int actions)) (assert (= (select behavior 0) ReleaseAction)), Output: (declare-fun delay () Real) (assert (= delay 0.0))
Start Event: ProcessRDSEFF, End Event: "AcquireAction", Input: (declare-datatypes ((actions 0)) (((AcquireAction) (ExternalCall) (ReleaseAction) (InternalAction))))	(declare-fun behavior () (Array Int actions)) (assert (= (select behavior 0) AcquireAction)), Output: (declare-fun delay () Real) (assert (= delay 0.0))
